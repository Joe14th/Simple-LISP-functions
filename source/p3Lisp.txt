;;; +=
;;;   Parameters:
;;;           x - the variable to be incrimented
;;;           y - the value to incriment x by
;;;   Purpose:
;;;           A variable is passed in which is incremented and assigned to the new value.
;;;           Returns the new value.
(defmacro += (x y)
    `(setf ,x (+ ,x ,y))
)

;;; iterate
;;;    Parameters:
;;;           control - the variable that is used to count from beginExpr to endExpr (inclusive)
;;;           beginExpr - the start value for the loop
;;;           endExpr - the end value for terminating loop
;;;           incrExpr - the value to incriment control by at the end of each loop
;;;           &rest bodyExpr - the rest of the arguments passed in to be executed within do
;;;    Purpose:
;;;           A control, begin value, end value, increment value are used to create an iterative loop.
;;;           Where the rest of the arguments are evaluated within each iteration.
;;;           Return True.
(defmacro iterate ( control beginExpr endExpr incrExpr &rest bodyExpr )
    (let ( (incr(gensym)) (end(gensym)) )
        `(do ( (,incr ,incrExpr) (,end ,endExpr) (,control ,beginExpr (+= ,control ,incr)) )
            ( (> ,control ,end) T)
            ,@ bodyExpr
        )
    )

)







